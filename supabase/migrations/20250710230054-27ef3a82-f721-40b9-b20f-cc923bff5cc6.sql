-- BEHAVIORAL ANALYTICS AGENTS SYSTEM
-- Create tables for AI-powered insights and data sync

-- Real-time behavioral insights from AI analysis
CREATE TABLE public.behavioral_insights (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  insight_type VARCHAR NOT NULL CHECK (insight_type IN ('friction', 'churn_prediction', 'conversion_opportunity', 'user_behavior', 'recommendation')),
  title TEXT NOT NULL,
  description TEXT NOT NULL,
  impact_score INTEGER NOT NULL CHECK (impact_score >= 0 AND impact_score <= 100),
  affected_users INTEGER NOT NULL DEFAULT 0,
  stage VARCHAR NOT NULL,
  recommended_actions JSONB NOT NULL DEFAULT '[]'::jsonb,
  metadata JSONB DEFAULT '{}'::jsonb,
  ai_confidence DECIMAL(3,2) DEFAULT 0.85,
  status VARCHAR DEFAULT 'active' CHECK (status IN ('active', 'implemented', 'dismissed')),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT now()
);

-- Data sync tracking to reconcile Amplitude vs internal data
CREATE TABLE public.data_sync_logs (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  source_system VARCHAR NOT NULL CHECK (source_system IN ('amplitude', 'internal_db', 'ai_agent')),
  sync_type VARCHAR NOT NULL CHECK (sync_type IN ('user_count', 'conversion_rates', 'behavioral_patterns', 'churn_predictions')),
  source_value JSONB NOT NULL,
  reconciled_value JSONB NOT NULL,
  discrepancy_detected BOOLEAN DEFAULT false,
  discrepancy_percentage DECIMAL(5,2),
  reconciliation_method VARCHAR,
  agent_notes TEXT,
  sync_timestamp TIMESTAMP WITH TIME ZONE DEFAULT now()
);

-- User behavior patterns detected by AI
CREATE TABLE public.user_behavior_patterns (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  pattern_type VARCHAR NOT NULL CHECK (pattern_type IN ('friction_point', 'success_path', 'abandonment_trigger', 'conversion_catalyst')),
  pattern_name VARCHAR NOT NULL,
  description TEXT NOT NULL,
  frequency_detected INTEGER DEFAULT 1,
  confidence_score DECIMAL(3,2) DEFAULT 0.80,
  affected_user_count INTEGER DEFAULT 0,
  stage_affected VARCHAR NOT NULL,
  detection_metadata JSONB DEFAULT '{}'::jsonb,
  first_detected TIMESTAMP WITH TIME ZONE DEFAULT now(),
  last_detected TIMESTAMP WITH TIME ZONE DEFAULT now(),
  is_active BOOLEAN DEFAULT true
);

-- Automatic recommendations generated by AI agents
CREATE TABLE public.ai_recommendations (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  recommendation_type VARCHAR NOT NULL CHECK (recommendation_type IN ('ui_improvement', 'flow_optimization', 'feature_suggestion', 'ab_test_proposal')),
  title TEXT NOT NULL,
  description TEXT NOT NULL,
  expected_impact_percentage DECIMAL(5,2),
  effort_score INTEGER CHECK (effort_score >= 1 AND effort_score <= 10),
  priority_score INTEGER CHECK (priority_score >= 1 AND priority_score <= 100),
  implementation_steps JSONB DEFAULT '[]'::jsonb,
  success_metrics JSONB DEFAULT '[]'::jsonb,
  related_insight_id UUID REFERENCES behavioral_insights(id),
  status VARCHAR DEFAULT 'pending' CHECK (status IN ('pending', 'approved', 'in_progress', 'completed', 'rejected')),
  created_by_agent VARCHAR DEFAULT 'behavioral_analytics_ai',
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT now()
);

-- Enable RLS
ALTER TABLE public.behavioral_insights ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.data_sync_logs ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_behavior_patterns ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.ai_recommendations ENABLE ROW LEVEL SECURITY;

-- RLS Policies for AI insights system
CREATE POLICY "Users can view behavioral insights" ON public.behavioral_insights FOR SELECT USING (auth.uid() IS NOT NULL);
CREATE POLICY "Admins can manage behavioral insights" ON public.behavioral_insights FOR ALL USING (
  EXISTS (SELECT 1 FROM profiles WHERE id = auth.uid() AND role_system IN ('admin', 'super_admin'))
);

CREATE POLICY "Admins can view sync logs" ON public.data_sync_logs FOR SELECT USING (
  EXISTS (SELECT 1 FROM profiles WHERE id = auth.uid() AND role_system IN ('admin', 'super_admin'))
);
CREATE POLICY "System can insert sync logs" ON public.data_sync_logs FOR INSERT WITH CHECK (true);

CREATE POLICY "Users can view behavior patterns" ON public.user_behavior_patterns FOR SELECT USING (auth.uid() IS NOT NULL);
CREATE POLICY "Admins can manage behavior patterns" ON public.user_behavior_patterns FOR ALL USING (
  EXISTS (SELECT 1 FROM profiles WHERE id = auth.uid() AND role_system IN ('admin', 'super_admin'))
);

CREATE POLICY "Users can view AI recommendations" ON public.ai_recommendations FOR SELECT USING (auth.uid() IS NOT NULL);
CREATE POLICY "Admins can manage AI recommendations" ON public.ai_recommendations FOR ALL USING (
  EXISTS (SELECT 1 FROM profiles WHERE id = auth.uid() AND role_system IN ('admin', 'super_admin'))
);

-- Create indexes for performance
CREATE INDEX idx_behavioral_insights_type_status ON behavioral_insights(insight_type, status);
CREATE INDEX idx_behavioral_insights_impact ON behavioral_insights(impact_score DESC);
CREATE INDEX idx_sync_logs_timestamp ON data_sync_logs(sync_timestamp DESC);
CREATE INDEX idx_behavior_patterns_active ON user_behavior_patterns(is_active, last_detected DESC);
CREATE INDEX idx_recommendations_priority ON ai_recommendations(priority_score DESC, status);

-- Trigger for updated_at
CREATE TRIGGER update_behavioral_insights_updated_at
  BEFORE UPDATE ON behavioral_insights
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_ai_recommendations_updated_at
  BEFORE UPDATE ON ai_recommendations
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();